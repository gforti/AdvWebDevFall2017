class SPA{constructor(route){this.content=document.querySelector("div.spa-content");this.loading=document.querySelector("div.spa-loading").classList;this.Model=new Model;this.View=new View;this.controller=new Controller(this.Model);this.checkedRegex=/(radio|checkbox)/i;window.addEventListener("hashchange",()=>{this.loadingStart();let page=this.Model.page;document.body.id=page;this.controller[page]().then(()=>{return this.renderContent(this.View[page])}).then(()=>{this.bindModelText().parseEvents().twoWayInputBind().parseClassState().cleanNavLinks().loadingEnd()}).catch(err=>{console.error(err);this.renderContent(window.Promise.resolve(this.Model.escapeHTML(err))).then(()=>{this.cleanNavLinks().loadingEnd()})})});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");window.dispatchEvent(new CustomEvent("spaRouteReady"));return this}renderContent(page){return page.then(html=>{this.content.innerHTML=html;return this})}update(evt,funcName){return this.Model[funcName](evt).then(()=>{return this.bindModelText().parseEvents().twoWayInputBind().parseClassState()})}cleanNavLinks(){let links=[].slice.call(document.querySelector("nav").querySelectorAll("a"));links.forEach(link=>{link.setAttribute("href",`${window.location.origin}${link.hash}`)});return this}parseClassState(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-class]"));contents.forEach(domElem=>{let css={};const bindClass=domElem.dataset.bindClass.replace(/'/g,'"');try{css=window.JSON.parse(bindClass)}catch(e){console.error(e);css={}}Object.entries(css).forEach(([className,condition])=>{const negation=condition.indexOf("!")>-1;condition=condition.replace(/!|\s/g,"");let add=this.Model[condition];if(negation)add=!add;domElem.classList[add?"add":"remove"](className)})});return this}parseEvents(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-event]"));contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.bindEvent.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.bindEvent});return this}twoWayInputBind(){let inputs=[].slice.call(this.content.querySelectorAll("input, select, textarea"));inputs.filter(field=>field.dataset.bindInput!=="false").filter(field=>field.name||field.dataset.hasOwnProperty("bindModel")).forEach(domElem=>{domElem.dataset.bindInput="false";const evtName=this.checkedRegex.test(domElem.type)?"change":"input";domElem.addEventListener(evtName,evt=>{const target=evt.target;const property=target.name||target.dataset.bindModel;const value=evt.target.type==="checkbox"?target.checked:target.value;this.Model.dataBindModel={[property]:value}})});return this}bindModelText(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-model], input, select, textarea"));const obj=this.Model.dataBindModel;contents.filter(domElem=>!domElem.dataset.hasOwnProperty("bindReady")).filter(domElem=>domElem.name||domElem.dataset.hasOwnProperty("bindModel")).forEach(domElem=>{const property=domElem.name||domElem.dataset.bindModel;if(!domElem.dataset.hasOwnProperty("bindModel"))domElem.dataset.bindModel=property;if(!domElem.dataset.hasOwnProperty("bindReady"))domElem.dataset.bindReady="true";const selector=`*[data-bind-model="${property}"]`;let val,safeVal;const useSafeHTML=domElem.dataset.hasOwnProperty("bindSafe");if(obj.hasOwnProperty(property)&&obj[property]!==undefined){val=obj[property];safeVal=this.Model.escapeHTML(val);if(domElem.type==="radio")domElem.checked=domElem.value===val;else if(domElem.type==="checkbox")domElem.checked=val;else if("value"in domElem)domElem.value=useSafeHTML?safeVal:val;else if("innerHTML"in domElem)domElem.innerHTML=useSafeHTML?safeVal:val}if(!domElem.matches("input, select, textarea"))domElem.dataset.bindDisplay=domElem.innerHTML.length?"visible":"hidden";if(domElem.dataset.hasOwnProperty("bindCallback"))this.update(domElem,domElem.dataset.bindCallback);Object.defineProperty(obj,property,{get:()=>{return val},set:newValue=>{let elems=[].slice.call(this.content.querySelectorAll(selector));val=newValue;safeVal=this.Model.escapeHTML(val);elems.forEach(elem=>{const useSafeHTML=elem.dataset.hasOwnProperty("bindSafe");if(elem.type==="radio")elem.checked=elem.value===val;else if(elem.type==="checkbox")elem.checked=val;else if("value"in elem)elem.value=useSafeHTML?safeVal:val;else if("innerHTML"in elem)elem.innerHTML=useSafeHTML?safeVal:val;if(!elem.matches("input, select, textarea"))elem.dataset.bindDisplay=elem.innerHTML.length?"visible":"hidden";if(elem.dataset.hasOwnProperty("bindCallback"))this.update(elem,elem.dataset.bindCallback)});this.parseClassState()},configurable:true})});return this}}class BaseModel{constructor(){this.APIS={};this._Model={};Object.getOwnPropertyNames(Object.getPrototypeOf(new Controller)).filter(page=>page!=="constructor").forEach(page=>{this._Model[page]={}});this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}get dataBindModel(){return this._Model[this.page]}set dataBindModel(model){Object.assign(this._Model[this.page],model);return this}clearDataBindModel(){this._Model[this.page]={};return this}get page(){return window.location.hash.slice(1).split("?")[0]}escapeHTML(html){let div=document.createElement("div");div.appendChild(document.createTextNode(html));return div.innerHTML}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}generateUrlParams(params={}){return`?${Object.keys(params).map(k=>[k,params[k]].map(window.encodeURIComponent).join("=")).join("&")}`}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static todoTable(data){if(!Array.isArray(data))return Promise.resolve("");return Promise.resolve(`${data.map(row=>`<tr>\n                        <td>${row.author}</td>\n                        <td>${row.rating}</td>\n                        <td data-bind-class="{}">${row.reviewText}</td>\n                        <td>${row.createdOnFormated}</td>\n                        <td><button data-id="${row._id}" data-bind-event="click:deleteTodo" class="button is-danger is-outlined">Delete</button></td>\n                        <td><button data-id="${row._id}" data-bind-event="click:goToUpdatePage" class="button is-link is-outlined">Update</button></td>\n                    </tr>`).join("")}`)}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getReviewList()}add(){this.Model.clearDataBindModel();return window.Promise.resolve()}update(){return this.Model.updatePageLoad()}}class Model extends BaseModel{constructor(){super();this.APIS={Reviews:`//${window.location.hostname}:3001/api/v1/reviews/`}}getReviewList(){return this.http.get(this.APIS.Reviews).then(data=>{data.forEach(review=>{review.createdOnFormated=this.formatDate(review.createdOn)});return Components.todoTable(data).then(html=>{return this.dataBindModel.todoTable=html})})}deleteTodo(evt){const url=`${this.APIS.Reviews}${evt.target.dataset.id}`;return this.http.delete(url).then(()=>{return this.dataBindModel.deleteResultMsg="Review Deleted"}).catch(err=>{return this.dataBindModel.deleteResultMsg="Review was NOT Deleted"}).then(()=>{return this.getReviewList()})}saveReview(evt){let form=evt.target.form;if(!form.checkValidity()){this.dataBindModel.saveResultMsg="All fields are required";return Promise.resolve()}const data={author:this.dataBindModel.author,rating:this.dataBindModel.rating,reviewText:this.dataBindModel.reviewText};return this.http.post(this.APIS.Reviews,data).then(data=>{this.dataBindModel.saveResultMsg="Review Saved";return data}).catch(err=>{this.dataBindModel.saveResultMsg="Review was NOT Saved";return err})}goToUpdatePage(evt){this.redirect("update",{id:evt.target.dataset.id});return Promise.resolve()}updatePageLoad(){const url=`${this.APIS.Reviews}${this.urlParams().get("id")}`;return this.http.get(url).then(data=>{this.dataBindModel={author:data.author,rating:data.rating,reviewText:data.reviewText,_id:data._id};return data})}updateTodo(evt){let form=evt.target.form;if(!form.checkValidity()){this.dataBindModel.updateResultMsg="All fields are required";return Promise.resolve()}const data={author:this.dataBindModel.author,rating:this.dataBindModel.rating,reviewText:this.dataBindModel.reviewText};const url=`${this.APIS.Reviews}${this.dataBindModel._id}`;return this.http.put(url,data).then(data=>{this.dataBindModel.updateResultMsg="Review updated";return data}).catch(err=>{this.dataBindModel.updateResultMsg="Review was NOT updated";return err})}get isDeleted(){const msg=this.dataBindModel.deleteResultMsg;return msg&&msg.toLowerCase().indexOf("not")===-1}get isAdded(){const msg=this.dataBindModel.saveResultMsg;return msg&&msg.toLowerCase().indexOf("not")===-1&&msg.toLowerCase().indexOf("required")===-1}get isUpdated(){const msg=this.dataBindModel.updateResultMsg;return msg&&msg.toLowerCase().indexOf("not")===-1&&msg.toLowerCase().indexOf("required")===-1}}class View{get home(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Todo Crud Sample</h1>\n                    </div>\n                </section>\n                <p data-bind-model="deleteResultMsg" data-bind-safe data-bind-class="{'is-success': 'isDeleted', 'is-danger': '!isDeleted' }" class="notification is-spaced"></p>              \n                <table class="table is-spaced is-bordered is-hoverable is-fullwidth is-small">\n                  <thead>\n                    <tr class="is-selected">\n                        <th>Author</th>\n                        <th>Rating</th>\n                        <th>Review</th>\n                        <th>Created</th>\n                        <th></th>\n                        <th></th>\n                    </tr>\n                  </thead>\n                  <tbody data-bind-model="todoTable"></tbody>\n              </table>`)}get add(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Add New Todo</h1>\n                    </div>\n                </section>\n                <form data-no-submit>\n                    <div class="field">\n                        <label class="label">Author</label>\n                        <input type="text" name="author" class="input" required />\n                    </div>\n                    <div class="field">\n                        <label class="label">Rating</label>\n                        <select name="rating" class="select" required>\n                            <option value=""></option>\n                            <option value="1">1</option>\n                            <option value="2">2</option>\n                            <option value="3">3</option>\n                            <option value="4">4</option>\n                            <option value="5">5</option>\n                        </select>\n                    </div>\n                    <div class="field">\n                        <label class="label">Review</label>\n                        <textarea name="reviewText" class="textarea" required></textarea>\n                    </div>\n                    <div class="field"> \n                        <input type="reset" value="reset" class="button is-primary is-outlined" />\n                        <input type="button" value="submit" class="button is-link" data-bind-event="click:saveReview" /> \n                    </div>\n                    <p data-bind-model="saveResultMsg" data-bind-safe data-bind-class="{'is-success': 'isAdded', 'is-danger': '!isAdded' }" class="notification"></p>\n                </form>`)}get update(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Update Todo ID <span data-bind-model="_id" class="has-text-warning"></span></h1>\n                    </div>\n                </section>\n                <form data-no-submit>\n                    <div class="field">\n                        <label class="label">Author</label>\n                        <input type="text" name="author" class="input" required />\n                    </div>\n                    <div class="field">\n                        <label class="label">Rating</label>\n                        <select name="rating" class="select" required>\n                            <option value=""></option>\n                            <option value="1">1</option>\n                            <option value="2">2</option>\n                            <option value="3">3</option>\n                            <option value="4">4</option>\n                            <option value="5">5</option>\n                        </select>\n                    </div>\n                    <div class="field">\n                        <label class="label">Review</label>\n                        <textarea name="reviewText" class="textarea" required></textarea>\n                    </div>\n                    <div class="field">\n                        <input type="button" value="submit" data-bind-event="click:updateTodo" class="button is-link" />\n                    </div>\n                    <p data-bind-model="updateResultMsg" data-bind-safe data-bind-class="{'is-success': 'isUpdated', 'is-danger': '!isUpdated' }" class="notification is-spaced"></p>\n                </form>`)}}Object.assign(View.prototype,{fetchHTML(file){return fetch(file).then(response=>{if(!response.ok)throw Error(response.statusText);return response.text()}).then(text=>{let doc=(new DOMParser).parseFromString(text,"text/html");return doc.body.innerHTML.toString()}).catch(err=>{console.error(err);return"<p>Could not fetch file: ${file}</p>"})}});NodeList.prototype.forEach=Array.prototype.forEach;Object.assign(BaseModel.prototype,{formatNumber(number){return(new Intl.NumberFormat).format(number)},formatDate(date){const options={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"};return new Date(date).toLocaleDateString("en-US",options)}});window.addEventListener("spaRouteReady",()=>{[].slice.call(document.querySelectorAll("*[data-custom-no-submit]")).forEach(form=>{form.addEventListener("submit",event=>event.preventDefault())})});Object.assign(BaseModel.prototype,{redirect(route=window.location.hash.slice(1).split("?")[0],params={}){const query=this.generateUrlParams(params);window.location.assign(`${query}#${route}`)}});