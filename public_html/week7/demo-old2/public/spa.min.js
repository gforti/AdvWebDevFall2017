class SPA{constructor(route){this.content=document.querySelector("div.content");this.loading=document.querySelector("div.loading").classList;this.Model=new Model;this.view=new View;this.controller=new Controller(this.Model);window.addEventListener("hashchange",()=>{this.loadingStart();this.Model.dataBind={};let page=`${window.location.hash.slice(1).split("?")[0]}`;document.body.id=page;this.controller[page]().then(()=>{this.renderContent(this.view[page]).bindModelText().parseEvents().twoWayFormBind().loadingEnd().cleanNavLinks()}).catch(err=>{console.error(err);this.renderContent(this.Model.escapeHTML(err)).loadingEnd().cleanNavLinks()});window.location.href.replace(window.location.search,"")});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");return this}renderContent(html){this.content.innerHTML=html;return this}update(evt,funcName){this.Model[funcName](evt).then(()=>{this.bindModelText().parseEvents().twoWayFormBind()})}cleanNavLinks(){let links=document.querySelector("nav").querySelectorAll("a");links.forEach(link=>{link.setAttribute("href",`${link.origin}${link.hash}`)});return this}parseEvents(){let contents=this.content.querySelectorAll("*[data-event]");contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.event.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.event});return this}twoWayFormBind(){let form=this.content.querySelector("form[data-bindall]");if(form){form.addEventListener("change",event=>{const target=event.target;const property=target.name;if(property&&target.matches("input, select, textarea")){this.Model.dataBind[property]=target.value}});delete form.dataset.bindall}return this}bindModelText(){let contents=this.content.querySelectorAll("*[data-bindtext], input[name], select[name], textarea[name]");const obj=this.Model.dataBind;if(contents){contents.forEach(domElem=>{const property=domElem.name||domElem.dataset.bindtext;const selector=`*[data-bindText="${property}"], input[name="${property}"], select[name="${property}"], textarea[name="${property}"]`;let val,safeVal;const useSafeHTML=domElem.hasAttribute("data-safe");if(obj[property]){val=obj[property];safeVal=this.Model.escapeHTML(val);if("value"in domElem)domElem.value=useSafeHTML?safeVal:val;else if("innerHTML"in domElem)domElem.innerHTML=useSafeHTML?safeVal:val}Object.defineProperty(obj,property,{get:()=>{return val},set:newValue=>{let elems=document.querySelectorAll(selector);val=newValue;safeVal=this.Model.escapeHTML(val);if(elems){elems.forEach(elem=>{if("value"in elem)elem.value=useSafeHTML?safeVal:val;else if("innerHTML"in elem)elem.innerHTML=useSafeHTML?safeVal:val})}},configurable:true})})}return this}}class BaseModel{constructor(){this.APIS={};this.dataBind={};this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}escapeHTML(html){let div=document.createElement("div");div.appendChild(document.createTextNode(html));return div.innerHTML}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}generateUrlParams(params={}){const esc=encodeURIComponent;return`?${Object.keys(params).map(k=>`${esc(k)}=${esc(params[k])}`).join("&")}`}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static resultsData(data){if(!Array.isArray(data))return"";return`${data.map(row=>`<tr>\n                        <td>${row.author}</td>\n                        <td>${row.rating}</td>\n                        <td>${row.reviewText}</td>\n                        <td><button data-id="${row._id}" data-event="click:deleteReview">Delete</button></td>\n                        <td><button data-id="${row._id}" data-event="click:updatePage">Update</button></td>\n                    </tr>`).join("")}`}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getReviews()}add(){return Promise.resolve()}update(){return this.Model.updatePageLoad()}}class Model extends BaseModel{constructor(){super();this.APIS={Reviews:`//${window.location.hostname}:3001/api/v1/reviews/`}}getReviews(){return this.http.get(this.APIS.Reviews).then(data=>{return this.dataBind.reviewTable=Components.resultsData(data)})}saveReviews(){const data={author:this.dataBind.author,rating:this.dataBind.rating,reviewText:this.dataBind.reviewText};return this.http.post(this.APIS.Reviews,data).then(data=>{this.dataBind.saveResultMsg="Review Saved";return data}).catch(err=>{this.dataBind.saveResultMsg="Review NOT Saved";return err})}deleteReview(evt){const url=`${this.APIS.Reviews}${evt.target.dataset.id}`;return this.http.delete(url).then(()=>{return this.dataBind.deleteResultMsg="Review Deleted"}).catch(err=>{return this.dataBind.deleteResultMsg="Review NOT Deleted"}).then(()=>{return this.getReviews()})}updateAuthor(evt){this.dataBind.author=evt.target.value;return Promise.resolve()}updatePage(evt){const params=this.generateUrlParams({id:evt.target.dataset.id});window.location.href=`${params}#update`;return Promise.resolve()}updatePageLoad(){const url=`${this.APIS.Reviews}${this.urlParams().get("id")}`;return this.http.get(url).then(data=>{this.dataBind.author=data.author;this.dataBind.rating=data.rating;this.dataBind.reviewText=data.reviewText;this.dataBind._id=data._id;return data})}updateReviews(){const data={author:this.dataBind.author,rating:this.dataBind.rating,reviewText:this.dataBind.reviewText};const url=`${this.APIS.Reviews}${this.dataBind._id}`;return this.http.put(url,data).then(data=>{this.dataBind.updateResultMsg="Review updated";return data}).catch(err=>{this.dataBind.updateResultMsg="Review NOT updated";return err})}}class View{get home(){const html=`<p data-bindtext="deleteResultMsg"></p>\n                      <table>\n                        <thead>\n                            <th>Author</th>\n                            <th>Rating</th>\n                            <th>Review</th>\n                            <th></th>\n                        </thead>\n                        <tbody data-bindtext="reviewTable">                                                    \n                        </tbody>\n                    </table>`;return html}get add(){return`<form data-bindall>\n                        <p>\n                            <label>Author</label>\n                            <input type="text" name="author" data-event="keyup:updateAuthor" />\n                             <p data-bindtext="author"></p>\n                        </p>\n                        <p>\n                            <label>Rating</label>\n                            <select name="rating">\n                                <option value="1">1</option>\n                                <option value="2">2</option>\n                                <option value="3">3</option>\n                                <option value="4">4</option>\n                                <option value="5">5</option>\n                            </select>\n                        </p>\n                        <p>\n                            <label>Review</label>\n                            <input type="text" name="reviewText" />\n                        </p>\n                        <p data-bindtext="saveResultMsg"></p>\n                        <p> <input type="button" value="submit" data-event="click:saveReviews" /> </p>\n                    </form>`}get update(){return`<form data-bindall>\n                    <p>Update</p>\n                    <p>\n                        <label>Author</label>\n                        <input type="text" name="author" />\n                    </p>\n                    <p>\n                        <label>Rating</label>\n                        <select name="rating">\n                            <option value="1">1</option>\n                            <option value="2">2</option>\n                            <option value="3">3</option>\n                            <option value="4">4</option>\n                            <option value="5">5</option>\n                        </select>\n                    </p>\n                    <p>\n                        <label>Review</label>\n                        <textarea type="text" name="reviewText"></textarea>\n                    </p>\n                    <p data-bindtext="updateResultMsg"></p>\n                    <p> <input type="button" value="submit" data-event="click:updateReviews" /> </p>\n                </form>`}}